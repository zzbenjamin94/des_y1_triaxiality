
# coding: utf-8

# # Master script for computing halo properties
# ## Zhuowen Zhang
# ### First created March 8, 2018

# In[1]:

import numpy as np

# import pyplot and set some parameters to make plots prettier
import matplotlib.pyplot as plt
from code.plot_utils import plot_pretty
plot_pretty()
get_ipython().magic(u'matplotlib inline')

from mpl_toolkits.mplot3d import Axes3D
from code.halo_shape_calc import quad_moment
from code.lightcone_query_ra_dec import query_file, read_radial_bin
from code.setup.setup import data_home_dir
import pyfits
datadir = data_home_dir()


# In[2]:

#Basic units, MKS
ang2rad = np.pi/180
kpc2m = 3.086e19
eV2j = 1.602e-19
yr2sec = 3.154e7
c = 2.99e8 #m/s
h  = 6.626e-34 #in eV
e = 4.8e-10 #Coulumbs
G = 6.674*10**(-11) #MKS
M_sun = 1.99e30 #kg, mass of sun


# In[3]:

from astropy.cosmology import FlatLambdaCDM #as cosmo 
from astropy.coordinates import SkyCoord
from astropy import units as u
import pickle
import healpy as hp

#Define cosmology
h = 0.7
cosmo = FlatLambdaCDM(H0=h*100, Om0=0.3, Tcmb0=2.725)


#First read off halo .dat file generated by Galaxy_Clusters. Retrieve and derive properties -- from RA, DEC 
#to x,y,z and comoving distance from cosmology

#Read properties of redMapper matched halos
halo_file = datadir + 'Halo_redM_matched.dat'
halos_ID, halos_RA, halos_DEC, halos_z, halos_M, halos_Rvir = np.loadtxt(halo_file, dtype ="i, f, f, f, f, f",                                                          unpack=True, usecols=range(5,11), skiprows=1)
halos_num = len(halos_ID)
halos_Rvir /= 1000 #Convert from Kpc to Mpc



#Convert RA, DEC to x,y,z coordinates and z to comoving distance Using Astropy.coord package
halos_comv = cosmo.comoving_distance(halos_z).value
halos_coord = SkyCoord(halos_RA*u.degree, halos_DEC*u.degree, distance=halos_comv*u.Mpc, frame='icrs')
halos_coord.representation = 'cartesian'

#Converting astopy coordinates to number array
halos_coord_x = halos_coord.x.value
halos_coord_y = halos_coord.y.value
halos_coord_z = halos_coord.z.value
halos_coord = np.array([halos_coord_x, halos_coord_y, halos_coord_z])
#print halos_coord_x[0], halos_coord_y[0], halos_coord_z[0]
#print halos_RA[0], halos_DEC[0], halos_z[0], halos_Rvir[0], halos_coord[0,0],halos_coord[1,0], halos_coord[2,0]
#print type(halos_coord[2,0])


# In[11]:

#Extract halo shape for each identified halo
from code.Heidi_read_halo_particles import read_halo_ptcl
from code.halo_shape_calc import quad_moment

halos_shape = np.zeros(halos_num, dtype={'names':('halos_ID', 'axes_len', 'axes_dir', 'converge'),
                          'formats':('i', '(3,)f', '(3,3)f', 'i')})
halos_shape['halos_ID'] = halos_ID

for i in range(halos_num):  
    ptcl_x, ptcl_y, ptcl_z = read_halo_ptcl(halos_RA[i], halos_DEC[i], halos_z[i],                            halos_coord[0,i], halos_coord[1,i], halos_coord[2,i], halos_Rvir[i])
    ptcl_coord = [ptcl_x, ptcl_y, ptcl_z]
    
    #Read Shape from particles
    converge, axes_len, axes_dir = quad_moment(ptcl_coord, halos_coord[:,i], halos_Rvir[i])
    
    #Store into record array
    halos_shape['axes_len'][i] = axes_len #order of major, intermediate, minor
    halos_shape['axes_dir'][i] = axes_dir #order of minor, intermediate, major    
    halos_shape['converge'][i] = converge


# In[ ]:



