
# coding: utf-8

# # Master script for computing halo properties
# ## Zhuowen Zhang
# ### First created March 8, 2018

# In[1]:

import numpy as np

# import pyplot and set some parameters to make plots prettier
import matplotlib
matplotlib.use('TkAgg')
import matplotlib.pyplot as plt
#from code.plot_utils import plot_pretty
#plot_pretty()

from mpl_toolkits.mplot3d import Axes3D
from code.halo_shape_calc import quad_moment
from code.lightcone_query_ra_dec import query_file, read_radial_bin
from code.setup.setup import data_home_dir
import pyfits
datadir = data_home_dir()
from code.shape_model import halo_shape

#For storing high-z data


#datadir = '/global/cscratch1/sd/zzhang13/BCC/Chinchilla/Herd/Chinchilla-0/Lb2600/pixlc/'


# In[2]:

#Basic units, MKS
ang2rad = np.pi/180
kpc2m = 3.086e19
eV2j = 1.602e-19
yr2sec = 3.154e7
c = 2.99e8 #m/s
h  = 6.626e-34 #in eV
e = 4.8e-10 #Coulumbs
G = 6.674*10**(-11) #MKS
M_sun = 1.99e30 #kg, mass of sun


# In[3]:

from astropy.cosmology import FlatLambdaCDM #as cosmo 
from astropy.coordinates import SkyCoord
from astropy import units as u
import pickle
import healpy as hp

#Define cosmology
h = 0.7
cosmo = FlatLambdaCDM(H0=h*100, Om0=0.3, Tcmb0=2.725)


#First read off halo .dat file generated by Galaxy_Clusters. Retrieve and derive properties -- from RA, DEC 
#to x,y,z and comoving distance from cosmology

#Read properties of redMapper matched halos
halo_file = datadir + 'Halo_rand_allz.dat'
#halo_file = datadir + 'Halo_redM_Matched.dat'

#usecols=range(0,9) for random halo files and remove redM_lmda array column
halos_ID, halos_RA, halos_DEC, halos_z, halos_X, halos_Y, halos_Z, halos_M, halos_Rvir \
        = np.loadtxt(halo_file, dtype ="i, f, f, f, f, f, f, f, f", \
                     unpack=True, usecols=range(0,9), skiprows=1)

z_cut = np.where((halos_z <= 0.90)) #For high z, 0.34 < z < 0.90
halos_ID = halos_ID[z_cut]; halos_RA = halos_RA[z_cut]; halos_DEC = halos_DEC[z_cut]
halos_z = halos_z[z_cut]; halos_M = halos_M[z_cut]; halos_Rvir = halos_Rvir[z_cut];
halos_X = halos_X[z_cut]; halos_Y = halos_Y[z_cut]; halos_Z = halos_Z[z_cut]

#Use DEC, RA before rotation. They correspond to to the DEC, RA matching PX, PY, PZ 
halos_coord = np.array([halos_X, halos_Y, halos_Z])
theta, phi = np.asarray(hp.vec2ang(halos_coord.T))
halos_DEC = (np.pi/2 - theta) * 180/np.pi
halos_RA = phi * 180/np.pi
halos_num = len(halos_ID)
halos_comv = np.sqrt(halos_X**2. + halos_Y**2. + halos_Z**2.)
halos_coord = np.array([halos_X, halos_Y, halos_Z])


# In[11]:

#Extract halo shape for each identified halo
#from code.Heidi_read_halo_particles import read_halo_ptcl
#from code.halo_shape_calc import quad_moment

halos_shape = np.zeros(halos_num, dtype={'names':('halos_ID', 'M200b', 'Rvir', 'redshift',\
            'axes_len', 'axes_dir', 'halos_dir', 'halos_RA', 'halos_DEC', 'converge'),\
            'formats':('i', 'f','f','f','(3,)f','(3,3)f','(3,)f', 'f', 'f', 'i')})

halos_shape['halos_ID'] = halos_ID
halos_shape['halos_dir'] = halos_coord.T
halos_shape['M200b'] = halos_M
halos_shape['Rvir'] = halos_Rvir
halos_shape['redshift'] = halos_z
halos_shape['halos_RA'] = halos_RA
halos_shape['halos_DEC'] = halos_DEC


print "After cutoff total number of halos is ", halos_num

##Do this with the halo_shape object
for i in range(halos_num):
    shape_i = halo_shape(halos_RA[i], halos_DEC[i], halos_z[i], halos_coord[0,i],\
		halos_coord[1,i], halos_coord[2,i],halos_Rvir[i])
    shape_i.evolve()
    halos_shape['axes_len'][i] = shape_i.get_axis_ratio()
    halos_shape['axes_dir'][i] = shape_i.get_axis_dir()
    halos_shape['converge'][i] = shape_i.get_converge()
    ptcl_num = shape_i.get_ptcl_num()

    if i%100 == 0: 
	print "For halo_num {} number of particles inside halo is {}".format(i, ptcl_num)
    	print "Converge is ", shape_i.get_converge()
    	print "Axis ratio is ", shape_i.get_axis_ratio()


np.save('halos_shape_rand_allz_adapt.npy', halos_shape)
print 'Halos Shape files saved. '
